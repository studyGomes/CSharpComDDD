Estudos C# com DDD

Ferramentas e Tecnologias Testadas no Processo.

   - GitHub Actions - Funcionando
     - Ao Aplicar atualização, é possível utilizar o Actions para Implantar em um Linux Ubuntu 20.04
     - É Gerado os Artefatos para Download.

   - Azure DevOps - Funcionando
     - Criado uma Organização 
     - Utilização dos Boards de Atividades SCRUM para acompanhamento de Projetos.
     - Integração do GIT x Azure para utilização de PIPELINES.
     - Geração dos Artefatos ok.

Comandos Básicos

    GIT - Repositorios

        [ Inicio do Projeto ] 
        git init -- local - inicia uma pasta vazia com informações que serão do GIT 
        git remote add origin <https://github.com/<repository.git>>  -- local - vincular ao git remoto

        [ Configurar Email e Nome para eventuais erros do GIT ]
        git config user.email "blabla@blabla.com"
        git config user.name "Alexandre Gomes"

        [ Comandos no dia a dia ]
        git add meuarquivo.txt OU git add .                     -- Registra um arquivo para envio no GIT. Utiliando o PONTO, envia tudo.
        git commit -m "Criacao de arquivo bla bla bla…"         -- Apos preparar os arquivos para envio, Efetua o commit com a descricao .
        git push -u origin main OU git push -u origin master    -- Envio do commit para a branch
        git pull                                                -- Download de commits enviados pela Equipe. 

    DOTNET - Básicos

        [ Exemplos de Comandos ]
        dotnet new sln --name CSharpDDD         -- Criar Solucao
        dotnet new console -o helloWorld        -- Criar Projeto, com output - console, mvc, webapi, etc... 
        dotnet new mvc -o mvcProj               -- Novo Projeto
        dotnet sln add helloWorld               -- Linkar Solucao x Projeto (Estando na pasta da Solução)
        
        dotnet add Api.Application reference api.domain     -- Adicionando referencias entre Projetos
        dotnet add Api.Application reference api.service
        dotnet add Api.Application reference api.crosscutting

        [ EF - Entity Framework]
        dotnet ef migrations add First_Migration    -- Comando para Gerar os Scripts de Base de Dados baseado nas Entities.
        dotnet ef database update                   -- Comando para Update do Banco de Dados

Estrutura DDD


            <--    APPLICATION      -->

    [  DOMAIN  ]       <--           SERVICES                  

            <--  INFRAESTRUCTURE    <--


1 - Application --- Camada mais externa, para comunicação das camadas internas, por exemplo, a tecnologia e rotas.
    1.1 - Controllers --- Responsavel por processar e disponibilizar os Endpoints da Aplicação.
2 - Infraestructure
    2.1 - CrossCutting
    2.2 - Data --- Acesso a Banco de Dados, criação, Migrations, Conexões.
        2.2.1 - Context --- Conexão com Banco de Dados
        2.2.2 - Mapping --- Definição da entidade do Domain para o Banco de Dados, como PrimaryKey, Tipo de Campo, regras.
        2.2.3 - Migrations --- Estrutura de Scripts, automatizados pelo EF para Integração com DB, Atualização, Criacão, etc.
        2.2.4 - Repository --- Integração dos Objetos do Banco, Tabelas por exemplo, com o Sistema, tipo DataModulo.
3 - Domain --- Camada de Entidades 
    3.1 - Entities --- Classe das Entidades utilizadas no sistema
    3.2 - Interfaces --- Injeção de dependencias, Definicão de Interfaces para camadas que utilizarão.
        3.2.1 - Services --- Injeção de dependencias de Services
            3.2.1.1 - User --- Exemplo de Interface Implementação em Services
4 - Services --- Regras de Negócio, antes de chegar ao Banco 
    4.1 - Services --- Implementação das Interfaces da Camada de Domain.

